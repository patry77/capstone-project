---
- name: Configure jenkins
  hosts: all
  remote_user: "{{ lookup('env', 'REMOTE_USER') }}"
  become: yes

  tasks:
    - name: Set Jenkins password, github login and key, nexus password
      ansible.builtin.set_fact:
        jenkins_password: "{{ lookup('env', 'JENKINS_PASSWORD') }}"
        github_login: "{{ lookup('env', 'GH_USERNAME') }}"
        github_key: "{{ lookup('env', 'GH_KEY') }}"
        nexus_password: "{{ lookup('env', 'NEXUS_PASSWORD') }}"

    - name: Add Jenkins user to Docker group
      user:
        name: jenkins
        groups: docker
        append: yes

    - name: Wait for Jenkins to start
      wait_for:
        host: localhost
        port: 8085
        timeout: 300
         
    - name: Install Jenkins plugins
      community.general.jenkins_plugin:
        name: "{{ item }}"
        url_username: "admin"
        url_password: "{{ jenkins_password }}"
        url: http://localhost:8085
        timeout: 120
        state: latest
      with_items:  
        - ace-editor
        - ant
        - antisamy-markup-formatter
        - apache-httpcomponents-client-4-api
        - bootstrap4-api
        - bootstrap5-api
        - bouncycastle-api
        - branch-api
        - build-timeout
        - caffeine-api
        - checks-api
        - cloudbees-folder
        - command-launcher
        - credentials
        - credentials-binding
        - display-url-api
        - durable-task
        - echarts-api
        - email-ext
        - font-awesome-api
        - git
        - git-client
        - git-server
        - github
        - github-api
        - github-branch-source
        - gradle
        - handlebars
        - jackson2-api
        - jaxb
        - jdk-tool
        - jjwt-api
        - jquery3-api
        - jsch
        - junit
        - ldap
        - lockable-resources
        - mailer
        - matrix-auth
        - matrix-project
        - momentjs
        - okhttp-api
        - pam-auth
        - pipeline-build-step
        - pipeline-github-lib
        - pipeline-graph-analysis
        - pipeline-input-step
        - pipeline-milestone-step
        - pipeline-model-api
        - pipeline-model-definition
        - pipeline-model-extensions
        - pipeline-rest-api
        - pipeline-stage-step
        - pipeline-stage-tags-metadata
        - pipeline-stage-view
        - plain-credentials
        - plugin-util-api
        - popper-api
        - popper2-api
        - resource-disposer
        - scm-api
        - script-security
        - snakeyaml-api
        - ssh-credentials
        - ssh-slaves
        - sshd
        - structs
        - timestamper
        - token-macro
        - trilead-api
        - workflow-aggregator
        - workflow-api
        - workflow-basic-steps
        - workflow-cps
        - workflow-cps-global-lib
        - workflow-durable-task-step
        - workflow-job
        - workflow-multibranch
        - workflow-scm-step
        - workflow-step-api
        - workflow-support
        - ws-cleanup
   
    - name: Restart Jenkins
      service:
        name: jenkins
        state: restarted



    - name: Configure Jenkins Job with Jenkinsfile
      shell: |
          java -jar /home/{{ lookup('env', 'REMOTE_USER') }}/jenkins-cli.jar -s http://localhost:8085/ -auth admin:{{ jenkins_password }} groovy = <<EOF
          import jenkins.model.Jenkins
          def jenkins = Jenkins.instance
          import hudson.plugins.git.*;

          def scm = new GitSCM("https://github.com/patry77/spring-petclinic.git")
          scm.branches = [new BranchSpec("*/main")];

          def flowDefinition = new org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition(scm, "Jenkinsfile")

          def parent = Jenkins.instance
          def job = new org.jenkinsci.plugins.workflow.job.WorkflowJob(parent, "spring-petclinic")
          job.definition = flowDefinition

          parent.reload()
          EOF
      args:
        executable: /bin/bash
      ignore_errors: yes

    - name: Add Github credentials
      shell: |
          java -jar /home/{{ lookup('env', 'REMOTE_USER') }}/jenkins-cli.jar -s http://localhost:8085/ -auth admin:{{ jenkins_password }} groovy = <<EOF
          import com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl
          import com.cloudbees.plugins.credentials.*

          def creds = new UsernamePasswordCredentialsImpl(
              CredentialsScope.GLOBAL,
              "githubToken",
              "GitHub Token",
              "{{github_login}}",
              "{{github_key}}"
          )

          SystemCredentialsProvider.getInstance().getCredentials().add(creds)
          SystemCredentialsProvider.getInstance().save()
          EOF
      ignore_errors: yes

    - name: Add Nexus credentials
      shell: |
          java -jar /home/{{ lookup('env', 'REMOTE_USER') }}/jenkins-cli.jar -s http://localhost:8085/ -auth admin:{{ jenkins_password }} groovy = <<EOF
          import com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl
          import com.cloudbees.plugins.credentials.*

          def creds = new UsernamePasswordCredentialsImpl(
              CredentialsScope.GLOBAL,
              "nexusCreds",
              "Nexus Credentials",
              "admin",
              "{{ nexus_password }}"
          )

          SystemCredentialsProvider.getInstance().getCredentials().add(creds)
          SystemCredentialsProvider.getInstance().save()
          EOF
      ignore_errors: yes

    - name: Add GCP credentials
      shell: |
          java -jar /home/{{ lookup('env', 'REMOTE_USER') }}/jenkins-cli.jar -s http://localhost:8085/ -auth admin:{{ jenkins_password }} groovy = <<EOF
          import jenkins.model.*
          import com.cloudbees.plugins.credentials.*
          import com.cloudbees.plugins.credentials.common.*
          import com.cloudbees.plugins.credentials.domains.*
          import org.jenkinsci.plugins.plaincredentials.impl.*

          def secretFilePath = '/home/{{ lookup('env', 'REMOTE_USER') }}/gcp-service-account.json'
          def secretContent = new File(secretFilePath).text
          def creds = new FileCredentialsImpl(
              CredentialsScope.GLOBAL,
              "gcpServiceAccount",
              "GCP Service Account",
              new SecretBytes(Base64.getEncoder().encode(secretContent.bytes)),
              null,
              null
          )

          SystemCredentialsProvider.getInstance().getCredentials().add(creds)
          SystemCredentialsProvider.getInstance().save()
          EOF
      ignore_errors: yes