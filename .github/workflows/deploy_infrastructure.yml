name: Infrastructure Deployment


on:
  push:
    branches:
      - develop

jobs:
  deploy_pipeline_terraform:
    runs-on: ubuntu-latest

    outputs:
      ip_address: ${{ steps.getip.outputs.ip_address }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_CLOUD_TOKEN }}
          terraform_wrapper: false

      - name: Initialize Terraform
        run: terraform init -input=false
        working-directory: ./terraform/pipelineVM

      - name: Deploy Infrastructure
        run: terraform apply -auto-approve
        working-directory: ./terraform/pipelineVM

      - name: Get Outputs
        id: getip
        run: |
          terraform output -raw vm_public_ip
          tf_ip=$(terraform output -raw vm_public_ip)
          cleaned_ip=$(echo "${tf_ip}" | awk -F: '{print $1}')
          echo "ip_address=$cleaned_ip" >> "$GITHUB_OUTPUT"
        working-directory: ./terraform/pipelineVM

  deploy_pipeline_ansible:
    needs: deploy_pipeline_terraform
    runs-on: ubuntu-latest
    env:
      REMOTE_USER: ubuntu
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x


      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Set SSH Private Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@${{ needs.deploy_pipeline_terraform.outputs.ip_address }}

      - name: Ansible - Configure VM
        run: ansible-playbook -i "${{ needs.deploy_pipeline_terraform.outputs.ip_address }}," ./playbooks/configure-vm.yml
        env:
          gcp_service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          ANSIBLE_HOST_KEY_CHECKING: false
        working-directory: ./ansible
      
      - name: Ansible - Install Nexus
        run: ansible-playbook -i "${{ needs.deploy_pipeline_terraform.outputs.ip_address }}," ./playbooks/install-nexus.yml
        env:
          ANSIBLE_HOST_KEY_CHECKING: false
        working-directory: ./ansible
      
      - name: Ansible - Configure Nexus
        run: ansible-playbook -i "${{ needs.deploy_pipeline_terraform.outputs.ip_address }}," ./playbooks/configure-nexus.yml
        env:
          ANSIBLE_HOST_KEY_CHECKING: false
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        working-directory: ./ansible
      
      - name: Ansible - Install Jenkins
        run: ansible-playbook -i "${{ needs.deploy_pipeline_terraform.outputs.ip_address }}," ./playbooks/install-jenkins.yml
        env:
          ANSIBLE_HOST_KEY_CHECKING: false
          JENKINS_PORT: 8085
        working-directory: ./ansible
      
      - name: Ansible - Unlock Jenkins
        run: ansible-playbook -i "${{ needs.deploy_pipeline_terraform.outputs.ip_address }}," ./playbooks/unlock-jenkins.yml
        env:
          ANSIBLE_HOST_KEY_CHECKING: false
          JENKINS_USERNAME: ${{ secrets.JENKINS_USERNAME }}
          JENKINS_PASSWORD: ${{ secrets.JENKINS_PASSWORD }}
        working-directory: ./ansible
      
      - name: Ansible - Configure Jenkins
        run: ansible-playbook -i "${{ needs.deploy_pipeline_terraform.outputs.ip_address }}," ./playbooks/configure-jenkins.yml
        env:
          gcp_service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          ANSIBLE_HOST_KEY_CHECKING: false
          JENKINS_USERNAME: ${{ secrets.JENKINS_USERNAME }}
          JENKINS_PASSWORD: ${{ secrets.JENKINS_PASSWORD }}
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
          GH_USERNAME: ${{ secrets.GH_LOGIN }}
          GH_KEY: ${{ secrets.GH_KEY }}
        working-directory: ./ansible

      - name: Ansible - Configure jenkins webhook
        id: getJenkinsToken
        run: ansible-playbook -i "${{ needs.deploy_pipeline_terraform.outputs.ip_address }}," ./playbooks/configure-jenkins-webhook.yml
        env:
          ANSIBLE_HOST_KEY_CHECKING: false
          JENKINS_USERNAME: ${{ secrets.JENKINS_USERNAME }}
          JENKINS_PASSWORD: ${{ secrets.JENKINS_PASSWORD }}
          GH_KEY: ${{ secrets.GH_KEY }}
          WEBHOOK_URL: ${{ needs.deploy_pipeline_terraform.outputs.ip_address }}
        working-directory: ./ansible


  deploy_loadBalancer:
    needs: deploy_pipeline_ansible
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_CLOUD_TOKEN }}
          terraform_wrapper: false

      - name: Initialize Terraform
        run: terraform init -input=false
        working-directory: ./terraform/loadBalancer

      - name: Create auto.tfvars
        run: |
          echo "image = \"${{ needs.deploy_pipeline_terraform.outputs.ip_address }}:8082/repository/spring-petclinic/petclinic-test\"" > ./variables.auto.tfvars
          echo "insecure_host = \"${{ needs.deploy_pipeline_terraform.outputs.ip_address }}\"" >> ./variables.auto.tfvars
        working-directory: ./terraform/loadBalancer
        
      - name: Deploy Infrastructure
        run: terraform apply -auto-approve
        working-directory: ./terraform/loadBalancer
