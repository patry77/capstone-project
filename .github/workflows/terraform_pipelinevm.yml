name: Terraform Pipeline VM Deployment

on:
  push:
    branches:
      - develop

jobs:
  deploy_terraform:
    runs-on: ubuntu-latest

    outputs:
      ip_address: ${{ steps.deploy_infrastructure.outputs.ip_address }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_CLOUD_TOKEN }}

      - name: Initialize Terraform
        run: terraform init -input=false
        working-directory: ./terraform/pipelineVM

      - name: Deploy Infrastructure
        run: terraform apply -auto-approve
        working-directory: ./terraform/pipelineVM

      - name: Get Outputs
        id: outputs
        run: echo "ip_address = $(terraform output -raw vm_public_ip)" >> "$GITHUB_OUTPUT"

  deploy_ansible:
    needs: deploy_terraform
    runs-on: ubuntu-latest

    env:
      ANSIBLE_VAULT_PASSWORD_FILE: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Set SSH Private Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa


      - name: Run Ansible Playbook
        run: ansible-playbook -i ${{ needs.deploy_terraform.outputs.ip_address }} --vault-password-file $ANSIBLE_VAULT_PASSWORD_FILE ./playbooks/configure-vm.yml
        env:
          gcp_service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT }}
        working-directory: ./ansible